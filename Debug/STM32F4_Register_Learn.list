
STM32F4_Register_Learn.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000988  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .sec.         000004e4  08000b30  08000b30  00010b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000020  08001014  08001014  00011014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08001034  08001034  00020008  2**0
                  CONTENTS
  5 .ARM          00000000  08001034  08001034  00020008  2**0
                  CONTENTS
  6 .preinit_array 00000000  08001034  08001034  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08001034  08001034  00011034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08001038  08001038  00011038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000008  20000000  0800103c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000090  20000008  08001044  00020008  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000098  08001044  00020098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 13 .debug_info   000043f6  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00000c34  00000000  00000000  0002442e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000250  00000000  00000000  00025068  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001c8  00000000  00000000  000252b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001da5  00000000  00000000  00025480  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000033bd  00000000  00000000  00027225  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0008db5a  00000000  00000000  0002a5e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000b813c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000734  00000000  00000000  000b81b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000008 	.word	0x20000008
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000b18 	.word	0x08000b18

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	08000b18 	.word	0x08000b18

080001e8 <ADC1_Start>:
	ADC1 -> SR = 0;
	ADC1 -> CR2 |= (1 << SWSTART);
}

void ADC1_Start(uint8_t channel)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	4603      	mov	r3, r0
 80001f0:	71fb      	strb	r3, [r7, #7]
	ADC1 -> SQR3 = 0;
 80001f2:	4b0c      	ldr	r3, [pc, #48]	; (8000224 <ADC1_Start+0x3c>)
 80001f4:	2200      	movs	r2, #0
 80001f6:	635a      	str	r2, [r3, #52]	; 0x34
	ADC1 -> SQR3 |= (channel << SQ1);
 80001f8:	4b0a      	ldr	r3, [pc, #40]	; (8000224 <ADC1_Start+0x3c>)
 80001fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80001fc:	79fb      	ldrb	r3, [r7, #7]
 80001fe:	4909      	ldr	r1, [pc, #36]	; (8000224 <ADC1_Start+0x3c>)
 8000200:	4313      	orrs	r3, r2
 8000202:	634b      	str	r3, [r1, #52]	; 0x34
	ADC1 -> SR = 0;
 8000204:	4b07      	ldr	r3, [pc, #28]	; (8000224 <ADC1_Start+0x3c>)
 8000206:	2200      	movs	r2, #0
 8000208:	601a      	str	r2, [r3, #0]
	ADC1 -> CR2 |= (1 << SWSTART);
 800020a:	4b06      	ldr	r3, [pc, #24]	; (8000224 <ADC1_Start+0x3c>)
 800020c:	689b      	ldr	r3, [r3, #8]
 800020e:	4a05      	ldr	r2, [pc, #20]	; (8000224 <ADC1_Start+0x3c>)
 8000210:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000214:	6093      	str	r3, [r2, #8]
}
 8000216:	bf00      	nop
 8000218:	370c      	adds	r7, #12
 800021a:	46bd      	mov	sp, r7
 800021c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000220:	4770      	bx	lr
 8000222:	bf00      	nop
 8000224:	40012000 	.word	0x40012000

08000228 <ADC1_GetValue>:

uint16_t ADC1_GetValue(uint8_t channel)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b082      	sub	sp, #8
 800022c:	af00      	add	r7, sp, #0
 800022e:	4603      	mov	r3, r0
 8000230:	71fb      	strb	r3, [r7, #7]
	ADC1_Start(channel);
 8000232:	79fb      	ldrb	r3, [r7, #7]
 8000234:	4618      	mov	r0, r3
 8000236:	f7ff ffd7 	bl	80001e8 <ADC1_Start>
	while (!(ADC1 -> SR & (1 << 1)));
 800023a:	bf00      	nop
 800023c:	4b07      	ldr	r3, [pc, #28]	; (800025c <ADC1_GetValue+0x34>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	f003 0302 	and.w	r3, r3, #2
 8000244:	2b00      	cmp	r3, #0
 8000246:	d0f9      	beq.n	800023c <ADC1_GetValue+0x14>
	ADC1 -> SR = 0;
 8000248:	4b04      	ldr	r3, [pc, #16]	; (800025c <ADC1_GetValue+0x34>)
 800024a:	2200      	movs	r2, #0
 800024c:	601a      	str	r2, [r3, #0]
	return (ADC1 -> DR);
 800024e:	4b03      	ldr	r3, [pc, #12]	; (800025c <ADC1_GetValue+0x34>)
 8000250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000252:	b29b      	uxth	r3, r3
}
 8000254:	4618      	mov	r0, r3
 8000256:	3708      	adds	r7, #8
 8000258:	46bd      	mov	sp, r7
 800025a:	bd80      	pop	{r7, pc}
 800025c:	40012000 	.word	0x40012000

08000260 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000260:	b480      	push	{r7}
 8000262:	b083      	sub	sp, #12
 8000264:	af00      	add	r7, sp, #0
 8000266:	4603      	mov	r3, r0
 8000268:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800026a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800026e:	2b00      	cmp	r3, #0
 8000270:	db0b      	blt.n	800028a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000272:	79fb      	ldrb	r3, [r7, #7]
 8000274:	f003 021f 	and.w	r2, r3, #31
 8000278:	4907      	ldr	r1, [pc, #28]	; (8000298 <__NVIC_EnableIRQ+0x38>)
 800027a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800027e:	095b      	lsrs	r3, r3, #5
 8000280:	2001      	movs	r0, #1
 8000282:	fa00 f202 	lsl.w	r2, r0, r2
 8000286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800028a:	bf00      	nop
 800028c:	370c      	adds	r7, #12
 800028e:	46bd      	mov	sp, r7
 8000290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	e000e100 	.word	0xe000e100

0800029c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800029c:	b480      	push	{r7}
 800029e:	b083      	sub	sp, #12
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	4603      	mov	r3, r0
 80002a4:	6039      	str	r1, [r7, #0]
 80002a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	db0a      	blt.n	80002c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002b0:	683b      	ldr	r3, [r7, #0]
 80002b2:	b2da      	uxtb	r2, r3
 80002b4:	490c      	ldr	r1, [pc, #48]	; (80002e8 <__NVIC_SetPriority+0x4c>)
 80002b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ba:	0112      	lsls	r2, r2, #4
 80002bc:	b2d2      	uxtb	r2, r2
 80002be:	440b      	add	r3, r1
 80002c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002c4:	e00a      	b.n	80002dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c6:	683b      	ldr	r3, [r7, #0]
 80002c8:	b2da      	uxtb	r2, r3
 80002ca:	4908      	ldr	r1, [pc, #32]	; (80002ec <__NVIC_SetPriority+0x50>)
 80002cc:	79fb      	ldrb	r3, [r7, #7]
 80002ce:	f003 030f 	and.w	r3, r3, #15
 80002d2:	3b04      	subs	r3, #4
 80002d4:	0112      	lsls	r2, r2, #4
 80002d6:	b2d2      	uxtb	r2, r2
 80002d8:	440b      	add	r3, r1
 80002da:	761a      	strb	r2, [r3, #24]
}
 80002dc:	bf00      	nop
 80002de:	370c      	adds	r7, #12
 80002e0:	46bd      	mov	sp, r7
 80002e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e6:	4770      	bx	lr
 80002e8:	e000e100 	.word	0xe000e100
 80002ec:	e000ed00 	.word	0xe000ed00

080002f0 <GPIO_Config>:
 */

#include "PeripheralConfig.h"

void GPIO_Config(void)
{
 80002f0:	b480      	push	{r7}
 80002f2:	af00      	add	r7, sp, #0
	// Set clock GPIO
	RCC -> AHB1ENR |= (1 << GPIOD_EN);
 80002f4:	4b14      	ldr	r3, [pc, #80]	; (8000348 <GPIO_Config+0x58>)
 80002f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f8:	4a13      	ldr	r2, [pc, #76]	; (8000348 <GPIO_Config+0x58>)
 80002fa:	f043 0308 	orr.w	r3, r3, #8
 80002fe:	6313      	str	r3, [r2, #48]	; 0x30
	// GPIO config
	GPIOD -> MODER |= (OUTPUT << LED3_Pin * 2) | (OUTPUT << LED4_Pin * 2) | (OUTPUT << LED5_Pin * 2) | (OUTPUT << LED6_Pin * 2);
 8000300:	4b12      	ldr	r3, [pc, #72]	; (800034c <GPIO_Config+0x5c>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a11      	ldr	r2, [pc, #68]	; (800034c <GPIO_Config+0x5c>)
 8000306:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 800030a:	6013      	str	r3, [r2, #0]
	GPIOD -> OTYPER = (OUTPUT_PP << LED3_Pin) | (OUTPUT_PP << LED4_Pin) | (OUTPUT_PP << LED5_Pin) | (OUTPUT_PP << LED6_Pin);
 800030c:	4b0f      	ldr	r3, [pc, #60]	; (800034c <GPIO_Config+0x5c>)
 800030e:	2200      	movs	r2, #0
 8000310:	605a      	str	r2, [r3, #4]
	GPIOD -> OSPEEDR = (H_SPEED << LED3_Pin * 2) | (H_SPEED << LED4_Pin * 2) | (H_SPEED << LED5_Pin * 2) | (H_SPEED << LED6_Pin * 2);
 8000312:	4b0e      	ldr	r3, [pc, #56]	; (800034c <GPIO_Config+0x5c>)
 8000314:	f04f 422a 	mov.w	r2, #2852126720	; 0xaa000000
 8000318:	609a      	str	r2, [r3, #8]
	GPIOD -> PUPDR = (PUP_N_PP << LED3_Pin) | (PUP_N_PP << LED4_Pin) | (PUP_N_PP << LED5_Pin) | (PUP_N_PP << LED6_Pin);
 800031a:	4b0c      	ldr	r3, [pc, #48]	; (800034c <GPIO_Config+0x5c>)
 800031c:	2200      	movs	r2, #0
 800031e:	60da      	str	r2, [r3, #12]

	RCC -> AHB1ENR |= (1 << GPIOA_EN);
 8000320:	4b09      	ldr	r3, [pc, #36]	; (8000348 <GPIO_Config+0x58>)
 8000322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000324:	4a08      	ldr	r2, [pc, #32]	; (8000348 <GPIO_Config+0x58>)
 8000326:	f043 0301 	orr.w	r3, r3, #1
 800032a:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA -> MODER |= (INPUT << BTN_Pin);
 800032c:	4b08      	ldr	r3, [pc, #32]	; (8000350 <GPIO_Config+0x60>)
 800032e:	4a08      	ldr	r2, [pc, #32]	; (8000350 <GPIO_Config+0x60>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	6013      	str	r3, [r2, #0]
	GPIOA -> PUPDR |= (PUP_N_PP << BTN_Pin);
 8000334:	4b06      	ldr	r3, [pc, #24]	; (8000350 <GPIO_Config+0x60>)
 8000336:	4a06      	ldr	r2, [pc, #24]	; (8000350 <GPIO_Config+0x60>)
 8000338:	68db      	ldr	r3, [r3, #12]
 800033a:	60d3      	str	r3, [r2, #12]
}
 800033c:	bf00      	nop
 800033e:	46bd      	mov	sp, r7
 8000340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000344:	4770      	bx	lr
 8000346:	bf00      	nop
 8000348:	40023800 	.word	0x40023800
 800034c:	40020c00 	.word	0x40020c00
 8000350:	40020000 	.word	0x40020000

08000354 <SPI1_Config>:

#ifdef STM32F407DEF_H_


void SPI1_Config(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
	 * MODE: Master full duplex
	 * Frame: 8bit | First bit: MSB bit
	 * SCK Mode: SPOL = 1 | SPHA = 1
	 */

	RCC -> APB2ENR |= (1 << SPI1_EN);
 8000358:	4b24      	ldr	r3, [pc, #144]	; (80003ec <SPI1_Config+0x98>)
 800035a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800035c:	4a23      	ldr	r2, [pc, #140]	; (80003ec <SPI1_Config+0x98>)
 800035e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000362:	6453      	str	r3, [r2, #68]	; 0x44
	SPI1 -> CR1 |= (DATA_FRAME_8_BIT << DFF) | (FULL_DUPLEX << RXONLY) | (1 << SSM) | (1 << SSI) | (MSB_FIRST << LSBFIRST);
 8000364:	4b22      	ldr	r3, [pc, #136]	; (80003f0 <SPI1_Config+0x9c>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	4a21      	ldr	r2, [pc, #132]	; (80003f0 <SPI1_Config+0x9c>)
 800036a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800036e:	6013      	str	r3, [r2, #0]
	SPI1 -> CR1 |= (PCLK_DIV_16 << BR) | (MASTER_CONFIG << MSTR) | (1 << SPICPOL) | (1 << SPICPHA);
 8000370:	4b1f      	ldr	r3, [pc, #124]	; (80003f0 <SPI1_Config+0x9c>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4a1e      	ldr	r2, [pc, #120]	; (80003f0 <SPI1_Config+0x9c>)
 8000376:	f043 031f 	orr.w	r3, r3, #31
 800037a:	6013      	str	r3, [r2, #0]
	SPI1 -> CR1 |= (1 << SPE);
 800037c:	4b1c      	ldr	r3, [pc, #112]	; (80003f0 <SPI1_Config+0x9c>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	4a1b      	ldr	r2, [pc, #108]	; (80003f0 <SPI1_Config+0x9c>)
 8000382:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000386:	6013      	str	r3, [r2, #0]

	RCC -> AHB1ENR |= (1 << SPI1_PORT_EN);
 8000388:	4b18      	ldr	r3, [pc, #96]	; (80003ec <SPI1_Config+0x98>)
 800038a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800038c:	4a17      	ldr	r2, [pc, #92]	; (80003ec <SPI1_Config+0x98>)
 800038e:	f043 0301 	orr.w	r3, r3, #1
 8000392:	6313      	str	r3, [r2, #48]	; 0x30
	// SCK, MOSI, MISO pins config
	SPI1_PORT -> MODER |= (AFM << SPI1_MOSI_MODER) | (AFM << SPI1_MISO_MODER) | (AFM << SPI1_SCK_MODER);
 8000394:	4b17      	ldr	r3, [pc, #92]	; (80003f4 <SPI1_Config+0xa0>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4a16      	ldr	r2, [pc, #88]	; (80003f4 <SPI1_Config+0xa0>)
 800039a:	f443 4328 	orr.w	r3, r3, #43008	; 0xa800
 800039e:	6013      	str	r3, [r2, #0]
	SPI1_PORT -> OSPEEDR |= (VH_SPEED << SPI1_MOSI_SP) | (VH_SPEED << SPI1_MISO_OP) | (VH_SPEED << SPI1_SCK_OP);
 80003a0:	4b14      	ldr	r3, [pc, #80]	; (80003f4 <SPI1_Config+0xa0>)
 80003a2:	689b      	ldr	r3, [r3, #8]
 80003a4:	4a13      	ldr	r2, [pc, #76]	; (80003f4 <SPI1_Config+0xa0>)
 80003a6:	f443 437c 	orr.w	r3, r3, #64512	; 0xfc00
 80003aa:	6093      	str	r3, [r2, #8]
	SPI1_PORT -> IDR |= (1 << SPI1_MOSI) | (1 << SPI1_MISO) | (1 << SPI1_SCK);
 80003ac:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <SPI1_Config+0xa0>)
 80003ae:	691b      	ldr	r3, [r3, #16]
 80003b0:	4a10      	ldr	r2, [pc, #64]	; (80003f4 <SPI1_Config+0xa0>)
 80003b2:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80003b6:	6113      	str	r3, [r2, #16]
	SPI1_PORT -> AFRL |= (SPIM_AF << SPI1_MOSI_AF) | (SPIM_AF << SPI1_MISO_AF) | (SPIM_AF << SPI1_SCK_AF);
 80003b8:	4b0e      	ldr	r3, [pc, #56]	; (80003f4 <SPI1_Config+0xa0>)
 80003ba:	6a1b      	ldr	r3, [r3, #32]
 80003bc:	4a0d      	ldr	r2, [pc, #52]	; (80003f4 <SPI1_Config+0xa0>)
 80003be:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 80003c2:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 80003c6:	6213      	str	r3, [r2, #32]
	// SS pin config
	SPI_CS_PORT -> MODER |= (OUTPUT << SPI_CS_PIN * 2);
 80003c8:	4b0a      	ldr	r3, [pc, #40]	; (80003f4 <SPI1_Config+0xa0>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	4a09      	ldr	r2, [pc, #36]	; (80003f4 <SPI1_Config+0xa0>)
 80003ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003d2:	6013      	str	r3, [r2, #0]
	SPI_CS_PORT -> OSPEEDR |= (VH_SPEED << SPI_CS_PIN * 2);
 80003d4:	4b07      	ldr	r3, [pc, #28]	; (80003f4 <SPI1_Config+0xa0>)
 80003d6:	689b      	ldr	r3, [r3, #8]
 80003d8:	4a06      	ldr	r2, [pc, #24]	; (80003f4 <SPI1_Config+0xa0>)
 80003da:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80003de:	6093      	str	r3, [r2, #8]
}
 80003e0:	bf00      	nop
 80003e2:	46bd      	mov	sp, r7
 80003e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e8:	4770      	bx	lr
 80003ea:	bf00      	nop
 80003ec:	40023800 	.word	0x40023800
 80003f0:	40013000 	.word	0x40013000
 80003f4:	40020000 	.word	0x40020000

080003f8 <SPI3_Config>:


void SPI3_Config(void)
{
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0
	 * Frame: 8bit | First bit: MSB bit
	 * SCK Mode: SPOL = 1 | SPHA = 1
	 * Hardware input slaver: PA15
	 */

	RCC -> APB1ENR |= (1 << SPI3_EN);
 80003fc:	4b2f      	ldr	r3, [pc, #188]	; (80004bc <SPI3_Config+0xc4>)
 80003fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000400:	4a2e      	ldr	r2, [pc, #184]	; (80004bc <SPI3_Config+0xc4>)
 8000402:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000406:	6413      	str	r3, [r2, #64]	; 0x40
	SPI3 -> CR1 |= (DATA_FRAME_8_BIT << DFF) | (FULL_DUPLEX << RXONLY) | (0 << SSM) | (0 << SSI) | (MSB_FIRST << LSBFIRST);
 8000408:	4b2d      	ldr	r3, [pc, #180]	; (80004c0 <SPI3_Config+0xc8>)
 800040a:	4a2d      	ldr	r2, [pc, #180]	; (80004c0 <SPI3_Config+0xc8>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	6013      	str	r3, [r2, #0]
	SPI3 -> CR1 |= (1 << SPICPOL) | (1 << SPICPHA);
 8000410:	4b2b      	ldr	r3, [pc, #172]	; (80004c0 <SPI3_Config+0xc8>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	4a2a      	ldr	r2, [pc, #168]	; (80004c0 <SPI3_Config+0xc8>)
 8000416:	f043 0303 	orr.w	r3, r3, #3
 800041a:	6013      	str	r3, [r2, #0]
	SPI3 -> CR1 |= (1 << SPE);
 800041c:	4b28      	ldr	r3, [pc, #160]	; (80004c0 <SPI3_Config+0xc8>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	4a27      	ldr	r2, [pc, #156]	; (80004c0 <SPI3_Config+0xc8>)
 8000422:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000426:	6013      	str	r3, [r2, #0]

	RCC -> AHB1ENR |= (1 << SPI3_PORT_EN);
 8000428:	4b24      	ldr	r3, [pc, #144]	; (80004bc <SPI3_Config+0xc4>)
 800042a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800042c:	4a23      	ldr	r2, [pc, #140]	; (80004bc <SPI3_Config+0xc4>)
 800042e:	f043 0304 	orr.w	r3, r3, #4
 8000432:	6313      	str	r3, [r2, #48]	; 0x30
	// SCK, MOSI, MISO pins config
	SPI3_PORT -> MODER |= (AFM << SPI3_MOSI_MODER) | (AFM << SPI3_MISO_MODER) | (AFM << SPI3_SCK_MODER);
 8000434:	4b23      	ldr	r3, [pc, #140]	; (80004c4 <SPI3_Config+0xcc>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4a22      	ldr	r2, [pc, #136]	; (80004c4 <SPI3_Config+0xcc>)
 800043a:	f043 7328 	orr.w	r3, r3, #44040192	; 0x2a00000
 800043e:	6013      	str	r3, [r2, #0]
	SPI3_PORT -> OSPEEDR |= (VH_SPEED << SPI3_MOSI_SP) | (VH_SPEED << SPI3_MISO_OP) | (VH_SPEED << SPI3_SCK_OP);
 8000440:	4b20      	ldr	r3, [pc, #128]	; (80004c4 <SPI3_Config+0xcc>)
 8000442:	689b      	ldr	r3, [r3, #8]
 8000444:	4a1f      	ldr	r2, [pc, #124]	; (80004c4 <SPI3_Config+0xcc>)
 8000446:	f043 737c 	orr.w	r3, r3, #66060288	; 0x3f00000
 800044a:	6093      	str	r3, [r2, #8]
	SPI3_PORT -> IDR |= (1 << SPI3_MOSI) | (1 << SPI3_MISO) | (1 << SPI3_SCK);
 800044c:	4b1d      	ldr	r3, [pc, #116]	; (80004c4 <SPI3_Config+0xcc>)
 800044e:	691b      	ldr	r3, [r3, #16]
 8000450:	4a1c      	ldr	r2, [pc, #112]	; (80004c4 <SPI3_Config+0xcc>)
 8000452:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000456:	6113      	str	r3, [r2, #16]
	SPI3_PORT -> AFRH |= (SPIS_AF << SPI3_MOSI_AF) | (SPIS_AF << SPI3_MISO_AF) | (SPIS_AF << SPI3_SCK_AF);
 8000458:	4b1a      	ldr	r3, [pc, #104]	; (80004c4 <SPI3_Config+0xcc>)
 800045a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800045c:	4a19      	ldr	r2, [pc, #100]	; (80004c4 <SPI3_Config+0xcc>)
 800045e:	f443 23cc 	orr.w	r3, r3, #417792	; 0x66000
 8000462:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8000466:	6253      	str	r3, [r2, #36]	; 0x24
	//NSS pin config (Slaver Mode)
	RCC -> AHB1ENR |= (1 << GPIOA_EN);
 8000468:	4b14      	ldr	r3, [pc, #80]	; (80004bc <SPI3_Config+0xc4>)
 800046a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800046c:	4a13      	ldr	r2, [pc, #76]	; (80004bc <SPI3_Config+0xc4>)
 800046e:	f043 0301 	orr.w	r3, r3, #1
 8000472:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA -> MODER |= (AFM << MODER15);
 8000474:	4b14      	ldr	r3, [pc, #80]	; (80004c8 <SPI3_Config+0xd0>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	4a13      	ldr	r2, [pc, #76]	; (80004c8 <SPI3_Config+0xd0>)
 800047a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800047e:	6013      	str	r3, [r2, #0]
	GPIOA -> OSPEEDR |= (VH_SPEED << OSPEEDR15);
 8000480:	4b11      	ldr	r3, [pc, #68]	; (80004c8 <SPI3_Config+0xd0>)
 8000482:	689b      	ldr	r3, [r3, #8]
 8000484:	4a10      	ldr	r2, [pc, #64]	; (80004c8 <SPI3_Config+0xd0>)
 8000486:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800048a:	6093      	str	r3, [r2, #8]
	GPIOA -> OTYPER |= (OUTPUT_PP << OT15);
 800048c:	4b0e      	ldr	r3, [pc, #56]	; (80004c8 <SPI3_Config+0xd0>)
 800048e:	4a0e      	ldr	r2, [pc, #56]	; (80004c8 <SPI3_Config+0xd0>)
 8000490:	685b      	ldr	r3, [r3, #4]
 8000492:	6053      	str	r3, [r2, #4]
	GPIOA -> PUPDR |= (PUP_N_PP << PUPDR15);
 8000494:	4b0c      	ldr	r3, [pc, #48]	; (80004c8 <SPI3_Config+0xd0>)
 8000496:	4a0c      	ldr	r2, [pc, #48]	; (80004c8 <SPI3_Config+0xd0>)
 8000498:	68db      	ldr	r3, [r3, #12]
 800049a:	60d3      	str	r3, [r2, #12]
	GPIOA -> IDR |= (0 << 15);
 800049c:	4b0a      	ldr	r3, [pc, #40]	; (80004c8 <SPI3_Config+0xd0>)
 800049e:	4a0a      	ldr	r2, [pc, #40]	; (80004c8 <SPI3_Config+0xd0>)
 80004a0:	691b      	ldr	r3, [r3, #16]
 80004a2:	6113      	str	r3, [r2, #16]
	GPIOA -> AFRH |= (SPIS_AF << AFRH15);
 80004a4:	4b08      	ldr	r3, [pc, #32]	; (80004c8 <SPI3_Config+0xd0>)
 80004a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004a8:	4a07      	ldr	r2, [pc, #28]	; (80004c8 <SPI3_Config+0xd0>)
 80004aa:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80004ae:	6253      	str	r3, [r2, #36]	; 0x24
}
 80004b0:	bf00      	nop
 80004b2:	46bd      	mov	sp, r7
 80004b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop
 80004bc:	40023800 	.word	0x40023800
 80004c0:	40003c00 	.word	0x40003c00
 80004c4:	40020800 	.word	0x40020800
 80004c8:	40020000 	.word	0x40020000

080004cc <SPI_CS_Enable>:
void SPI_Disable(SPI_TypeDef * SPIx)
{
	SPIx -> CR1 &= ~(1 << SPE);
}
void SPI_CS_Enable(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
	GPIO_Write(SPI_CS_PORT, SPI_CS_PIN, LOW);
 80004d0:	2200      	movs	r2, #0
 80004d2:	2104      	movs	r1, #4
 80004d4:	4802      	ldr	r0, [pc, #8]	; (80004e0 <SPI_CS_Enable+0x14>)
 80004d6:	f000 fbc0 	bl	8000c5a <GPIO_Write>
}
 80004da:	bf00      	nop
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	40020000 	.word	0x40020000

080004e4 <SPI_CS_Disable>:
void SPI_CS_Disable(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
	GPIO_Write(SPI_CS_PORT, SPI_CS_PIN, HIGH);
 80004e8:	2201      	movs	r2, #1
 80004ea:	2104      	movs	r1, #4
 80004ec:	4802      	ldr	r0, [pc, #8]	; (80004f8 <SPI_CS_Disable+0x14>)
 80004ee:	f000 fbb4 	bl	8000c5a <GPIO_Write>
}
 80004f2:	bf00      	nop
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	40020000 	.word	0x40020000

080004fc <SPI_TransmitReceives>:
 * Hàm này dùng chỉ để mục đích test
 * SPI1 làm Master, SP3 làm Slaver
 * SPI1 sẽ truyền n kí tự (size) cho SPI3, SPI3 nhận n kí tự.
 */
void SPI_TransmitReceives(SPI_TypeDef * SPIx, SPI_TypeDef * SPIy ,uint8_t *tx_data, uint8_t *rx_data, uint8_t size)
{
 80004fc:	b480      	push	{r7}
 80004fe:	b087      	sub	sp, #28
 8000500:	af00      	add	r7, sp, #0
 8000502:	60f8      	str	r0, [r7, #12]
 8000504:	60b9      	str	r1, [r7, #8]
 8000506:	607a      	str	r2, [r7, #4]
 8000508:	603b      	str	r3, [r7, #0]
	uint32_t timeout = 100000;
 800050a:	4b3d      	ldr	r3, [pc, #244]	; (8000600 <SPI_TransmitReceives+0x104>)
 800050c:	617b      	str	r3, [r7, #20]
	uint8_t index = 0;
 800050e:	2300      	movs	r3, #0
 8000510:	74fb      	strb	r3, [r7, #19]
	for(index = 0; index < size;)
 8000512:	2300      	movs	r3, #0
 8000514:	74fb      	strb	r3, [r7, #19]
 8000516:	e046      	b.n	80005a6 <SPI_TransmitReceives+0xaa>
	{
		// Wait for TXE bit is set
		timeout = 100000;
 8000518:	4b39      	ldr	r3, [pc, #228]	; (8000600 <SPI_TransmitReceives+0x104>)
 800051a:	617b      	str	r3, [r7, #20]
		while(timeout)
 800051c:	e00b      	b.n	8000536 <SPI_TransmitReceives+0x3a>
		{
			timeout--;
 800051e:	697b      	ldr	r3, [r7, #20]
 8000520:	3b01      	subs	r3, #1
 8000522:	617b      	str	r3, [r7, #20]
			if((SPIx -> SR) & (1 << SPITXE))
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	689b      	ldr	r3, [r3, #8]
 8000528:	f003 0302 	and.w	r3, r3, #2
 800052c:	2b00      	cmp	r3, #0
 800052e:	d002      	beq.n	8000536 <SPI_TransmitReceives+0x3a>
			{
				timeout = 0;
 8000530:	2300      	movs	r3, #0
 8000532:	617b      	str	r3, [r7, #20]
				break;
 8000534:	e002      	b.n	800053c <SPI_TransmitReceives+0x40>
		while(timeout)
 8000536:	697b      	ldr	r3, [r7, #20]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d1f0      	bne.n	800051e <SPI_TransmitReceives+0x22>
			}
		}
		// Load the data into the Data Register
		SPIx -> DR = tx_data[index];
 800053c:	7cfb      	ldrb	r3, [r7, #19]
 800053e:	687a      	ldr	r2, [r7, #4]
 8000540:	4413      	add	r3, r2
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	461a      	mov	r2, r3
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	60da      	str	r2, [r3, #12]

		//Read data:
		// Wait for BSY bit is reset
		timeout = 100000;
 800054a:	4b2d      	ldr	r3, [pc, #180]	; (8000600 <SPI_TransmitReceives+0x104>)
 800054c:	617b      	str	r3, [r7, #20]
		while(timeout)
 800054e:	e00b      	b.n	8000568 <SPI_TransmitReceives+0x6c>
		{
			timeout--;
 8000550:	697b      	ldr	r3, [r7, #20]
 8000552:	3b01      	subs	r3, #1
 8000554:	617b      	str	r3, [r7, #20]
			if(!((SPIx -> SR) & (1 << BSY)))
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	689b      	ldr	r3, [r3, #8]
 800055a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800055e:	2b00      	cmp	r3, #0
 8000560:	d102      	bne.n	8000568 <SPI_TransmitReceives+0x6c>
			{
				timeout = 0;
 8000562:	2300      	movs	r3, #0
 8000564:	617b      	str	r3, [r7, #20]
				break;
 8000566:	e002      	b.n	800056e <SPI_TransmitReceives+0x72>
		while(timeout)
 8000568:	697b      	ldr	r3, [r7, #20]
 800056a:	2b00      	cmp	r3, #0
 800056c:	d1f0      	bne.n	8000550 <SPI_TransmitReceives+0x54>
			}
		}
		// Wait for RXNE bit is set
		timeout = 10000;
 800056e:	f242 7310 	movw	r3, #10000	; 0x2710
 8000572:	617b      	str	r3, [r7, #20]
		while(((SPIy -> SR) & (1 << SPIRXNE)) != (1 << SPIRXNE))
 8000574:	e005      	b.n	8000582 <SPI_TransmitReceives+0x86>
		{
			timeout--;
 8000576:	697b      	ldr	r3, [r7, #20]
 8000578:	3b01      	subs	r3, #1
 800057a:	617b      	str	r3, [r7, #20]
			if(timeout == 0)break;
 800057c:	697b      	ldr	r3, [r7, #20]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d006      	beq.n	8000590 <SPI_TransmitReceives+0x94>
		while(((SPIy -> SR) & (1 << SPIRXNE)) != (1 << SPIRXNE))
 8000582:	68bb      	ldr	r3, [r7, #8]
 8000584:	689b      	ldr	r3, [r3, #8]
 8000586:	f003 0301 	and.w	r3, r3, #1
 800058a:	2b01      	cmp	r3, #1
 800058c:	d1f3      	bne.n	8000576 <SPI_TransmitReceives+0x7a>
 800058e:	e000      	b.n	8000592 <SPI_TransmitReceives+0x96>
			if(timeout == 0)break;
 8000590:	bf00      	nop
		}
		// Read the data from the Data Register
		rx_data[index] = SPIy -> DR;
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	68d9      	ldr	r1, [r3, #12]
 8000596:	7cfb      	ldrb	r3, [r7, #19]
 8000598:	683a      	ldr	r2, [r7, #0]
 800059a:	4413      	add	r3, r2
 800059c:	b2ca      	uxtb	r2, r1
 800059e:	701a      	strb	r2, [r3, #0]
		index++;
 80005a0:	7cfb      	ldrb	r3, [r7, #19]
 80005a2:	3301      	adds	r3, #1
 80005a4:	74fb      	strb	r3, [r7, #19]
	for(index = 0; index < size;)
 80005a6:	7cfa      	ldrb	r2, [r7, #19]
 80005a8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80005ac:	429a      	cmp	r2, r3
 80005ae:	d3b3      	bcc.n	8000518 <SPI_TransmitReceives+0x1c>
	}
	// Wait for TXE bit is set
	timeout = 100000;
 80005b0:	4b13      	ldr	r3, [pc, #76]	; (8000600 <SPI_TransmitReceives+0x104>)
 80005b2:	617b      	str	r3, [r7, #20]
	while(timeout--)
 80005b4:	e008      	b.n	80005c8 <SPI_TransmitReceives+0xcc>
	{
		if((SPIx -> SR) & (1 << SPITXE))
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	689b      	ldr	r3, [r3, #8]
 80005ba:	f003 0302 	and.w	r3, r3, #2
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d002      	beq.n	80005c8 <SPI_TransmitReceives+0xcc>
		{
			timeout = 0;
 80005c2:	2300      	movs	r3, #0
 80005c4:	617b      	str	r3, [r7, #20]
			break;
 80005c6:	e004      	b.n	80005d2 <SPI_TransmitReceives+0xd6>
	while(timeout--)
 80005c8:	697b      	ldr	r3, [r7, #20]
 80005ca:	1e5a      	subs	r2, r3, #1
 80005cc:	617a      	str	r2, [r7, #20]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d1f1      	bne.n	80005b6 <SPI_TransmitReceives+0xba>
		}
	}
	// Wait for BSY bit is reset
	timeout = 100000;
 80005d2:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <SPI_TransmitReceives+0x104>)
 80005d4:	617b      	str	r3, [r7, #20]
	while(timeout--)
 80005d6:	e005      	b.n	80005e4 <SPI_TransmitReceives+0xe8>
	{
		if(!((SPIx -> SR) & (1 << BSY)))
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	689b      	ldr	r3, [r3, #8]
 80005dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d005      	beq.n	80005f0 <SPI_TransmitReceives+0xf4>
	while(timeout--)
 80005e4:	697b      	ldr	r3, [r7, #20]
 80005e6:	1e5a      	subs	r2, r3, #1
 80005e8:	617a      	str	r2, [r7, #20]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d1f4      	bne.n	80005d8 <SPI_TransmitReceives+0xdc>
		{
			break;
		}
	}
}
 80005ee:	e000      	b.n	80005f2 <SPI_TransmitReceives+0xf6>
			break;
 80005f0:	bf00      	nop
}
 80005f2:	bf00      	nop
 80005f4:	371c      	adds	r7, #28
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	000186a0 	.word	0x000186a0

08000604 <SysClock_Config>:
 */

#include "SysClockConfig.h"

void SysClock_Config(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
	FLASH -> ACR |= FLASH_ACR_DCEN | FLASH_ACR_ICEN | FLASH_ACR_PRFTEN | FLASH_ACR_LATENCY_3WS;
 8000608:	4b1d      	ldr	r3, [pc, #116]	; (8000680 <SysClock_Config+0x7c>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a1c      	ldr	r2, [pc, #112]	; (8000680 <SysClock_Config+0x7c>)
 800060e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000612:	f043 0303 	orr.w	r3, r3, #3
 8000616:	6013      	str	r3, [r2, #0]

	PWR -> CR |= (1 << 14);
 8000618:	4b1a      	ldr	r3, [pc, #104]	; (8000684 <SysClock_Config+0x80>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a19      	ldr	r2, [pc, #100]	; (8000684 <SysClock_Config+0x80>)
 800061e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000622:	6013      	str	r3, [r2, #0]

	RCC -> CR |= RCC_CR_HSEON | RCC_CR_PLLON;
 8000624:	4b18      	ldr	r3, [pc, #96]	; (8000688 <SysClock_Config+0x84>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a17      	ldr	r2, [pc, #92]	; (8000688 <SysClock_Config+0x84>)
 800062a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800062e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000632:	6013      	str	r3, [r2, #0]
	while (!(RCC -> CR & RCC_CR_HSERDY));
 8000634:	bf00      	nop
 8000636:	4b14      	ldr	r3, [pc, #80]	; (8000688 <SysClock_Config+0x84>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800063e:	2b00      	cmp	r3, #0
 8000640:	d0f9      	beq.n	8000636 <SysClock_Config+0x32>
	while(!(RCC -> CR & RCC_CR_PLLRDY));
 8000642:	bf00      	nop
 8000644:	4b10      	ldr	r3, [pc, #64]	; (8000688 <SysClock_Config+0x84>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800064c:	2b00      	cmp	r3, #0
 800064e:	d0f9      	beq.n	8000644 <SysClock_Config+0x40>

	RCC -> PLLCFGR = (PLL_M << 0) | (PLL_N << 6) | (PLL_P << 16) | (RCC_PLLCFGR_PLLSRC_HSE);
 8000650:	4b0d      	ldr	r3, [pc, #52]	; (8000688 <SysClock_Config+0x84>)
 8000652:	4a0e      	ldr	r2, [pc, #56]	; (800068c <SysClock_Config+0x88>)
 8000654:	605a      	str	r2, [r3, #4]

	RCC -> CFGR |= RCC_CFGR_HPRE_DIV1 | RCC_CFGR_PPRE1_DIV4 | RCC_CFGR_PPRE2_DIV2 | RCC_CFGR_SW_PLL;
 8000656:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <SysClock_Config+0x84>)
 8000658:	689b      	ldr	r3, [r3, #8]
 800065a:	4a0b      	ldr	r2, [pc, #44]	; (8000688 <SysClock_Config+0x84>)
 800065c:	f443 4314 	orr.w	r3, r3, #37888	; 0x9400
 8000660:	f043 0302 	orr.w	r3, r3, #2
 8000664:	6093      	str	r3, [r2, #8]
	while(!(RCC -> CFGR & RCC_CFGR_SWS));
 8000666:	bf00      	nop
 8000668:	4b07      	ldr	r3, [pc, #28]	; (8000688 <SysClock_Config+0x84>)
 800066a:	689b      	ldr	r3, [r3, #8]
 800066c:	f003 030c 	and.w	r3, r3, #12
 8000670:	2b00      	cmp	r3, #0
 8000672:	d0f9      	beq.n	8000668 <SysClock_Config+0x64>

}
 8000674:	bf00      	nop
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	40023c00 	.word	0x40023c00
 8000684:	40007000 	.word	0x40007000
 8000688:	40023800 	.word	0x40023800
 800068c:	00403208 	.word	0x00403208

08000690 <__NVIC_EnableIRQ>:
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800069a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	db0b      	blt.n	80006ba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	f003 021f 	and.w	r2, r3, #31
 80006a8:	4907      	ldr	r1, [pc, #28]	; (80006c8 <__NVIC_EnableIRQ+0x38>)
 80006aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ae:	095b      	lsrs	r3, r3, #5
 80006b0:	2001      	movs	r0, #1
 80006b2:	fa00 f202 	lsl.w	r2, r0, r2
 80006b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80006ba:	bf00      	nop
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	e000e100 	.word	0xe000e100

080006cc <__NVIC_SetPriority>:
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	6039      	str	r1, [r7, #0]
 80006d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	db0a      	blt.n	80006f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	b2da      	uxtb	r2, r3
 80006e4:	490c      	ldr	r1, [pc, #48]	; (8000718 <__NVIC_SetPriority+0x4c>)
 80006e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ea:	0112      	lsls	r2, r2, #4
 80006ec:	b2d2      	uxtb	r2, r2
 80006ee:	440b      	add	r3, r1
 80006f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80006f4:	e00a      	b.n	800070c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	b2da      	uxtb	r2, r3
 80006fa:	4908      	ldr	r1, [pc, #32]	; (800071c <__NVIC_SetPriority+0x50>)
 80006fc:	79fb      	ldrb	r3, [r7, #7]
 80006fe:	f003 030f 	and.w	r3, r3, #15
 8000702:	3b04      	subs	r3, #4
 8000704:	0112      	lsls	r2, r2, #4
 8000706:	b2d2      	uxtb	r2, r2
 8000708:	440b      	add	r3, r1
 800070a:	761a      	strb	r2, [r3, #24]
}
 800070c:	bf00      	nop
 800070e:	370c      	adds	r7, #12
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr
 8000718:	e000e100 	.word	0xe000e100
 800071c:	e000ed00 	.word	0xe000ed00

08000720 <__NVIC_EnableIRQ>:
{
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800072a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072e:	2b00      	cmp	r3, #0
 8000730:	db0b      	blt.n	800074a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	f003 021f 	and.w	r2, r3, #31
 8000738:	4907      	ldr	r1, [pc, #28]	; (8000758 <__NVIC_EnableIRQ+0x38>)
 800073a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800073e:	095b      	lsrs	r3, r3, #5
 8000740:	2001      	movs	r0, #1
 8000742:	fa00 f202 	lsl.w	r2, r0, r2
 8000746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800074a:	bf00      	nop
 800074c:	370c      	adds	r7, #12
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	e000e100 	.word	0xe000e100

0800075c <__NVIC_SetPriority>:
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	6039      	str	r1, [r7, #0]
 8000766:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000768:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076c:	2b00      	cmp	r3, #0
 800076e:	db0a      	blt.n	8000786 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	b2da      	uxtb	r2, r3
 8000774:	490c      	ldr	r1, [pc, #48]	; (80007a8 <__NVIC_SetPriority+0x4c>)
 8000776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800077a:	0112      	lsls	r2, r2, #4
 800077c:	b2d2      	uxtb	r2, r2
 800077e:	440b      	add	r3, r1
 8000780:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000784:	e00a      	b.n	800079c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	b2da      	uxtb	r2, r3
 800078a:	4908      	ldr	r1, [pc, #32]	; (80007ac <__NVIC_SetPriority+0x50>)
 800078c:	79fb      	ldrb	r3, [r7, #7]
 800078e:	f003 030f 	and.w	r3, r3, #15
 8000792:	3b04      	subs	r3, #4
 8000794:	0112      	lsls	r2, r2, #4
 8000796:	b2d2      	uxtb	r2, r2
 8000798:	440b      	add	r3, r1
 800079a:	761a      	strb	r2, [r3, #24]
}
 800079c:	bf00      	nop
 800079e:	370c      	adds	r7, #12
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr
 80007a8:	e000e100 	.word	0xe000e100
 80007ac:	e000ed00 	.word	0xe000ed00

080007b0 <__NVIC_EnableIRQ>:
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	4603      	mov	r3, r0
 80007b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	db0b      	blt.n	80007da <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	f003 021f 	and.w	r2, r3, #31
 80007c8:	4907      	ldr	r1, [pc, #28]	; (80007e8 <__NVIC_EnableIRQ+0x38>)
 80007ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ce:	095b      	lsrs	r3, r3, #5
 80007d0:	2001      	movs	r0, #1
 80007d2:	fa00 f202 	lsl.w	r2, r0, r2
 80007d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80007da:	bf00      	nop
 80007dc:	370c      	adds	r7, #12
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	e000e100 	.word	0xe000e100

080007ec <__NVIC_SetPriority>:
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	4603      	mov	r3, r0
 80007f4:	6039      	str	r1, [r7, #0]
 80007f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	db0a      	blt.n	8000816 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	b2da      	uxtb	r2, r3
 8000804:	490c      	ldr	r1, [pc, #48]	; (8000838 <__NVIC_SetPriority+0x4c>)
 8000806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800080a:	0112      	lsls	r2, r2, #4
 800080c:	b2d2      	uxtb	r2, r2
 800080e:	440b      	add	r3, r1
 8000810:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000814:	e00a      	b.n	800082c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	b2da      	uxtb	r2, r3
 800081a:	4908      	ldr	r1, [pc, #32]	; (800083c <__NVIC_SetPriority+0x50>)
 800081c:	79fb      	ldrb	r3, [r7, #7]
 800081e:	f003 030f 	and.w	r3, r3, #15
 8000822:	3b04      	subs	r3, #4
 8000824:	0112      	lsls	r2, r2, #4
 8000826:	b2d2      	uxtb	r2, r2
 8000828:	440b      	add	r3, r1
 800082a:	761a      	strb	r2, [r3, #24]
}
 800082c:	bf00      	nop
 800082e:	370c      	adds	r7, #12
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr
 8000838:	e000e100 	.word	0xe000e100
 800083c:	e000ed00 	.word	0xe000ed00

08000840 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	3b01      	subs	r3, #1
 800084c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000850:	d301      	bcc.n	8000856 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000852:	2301      	movs	r3, #1
 8000854:	e013      	b.n	800087e <SysTick_Config+0x3e>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000856:	4a0c      	ldr	r2, [pc, #48]	; (8000888 <SysTick_Config+0x48>)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	3b01      	subs	r3, #1
 800085c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800085e:	210f      	movs	r1, #15
 8000860:	f04f 30ff 	mov.w	r0, #4294967295
 8000864:	f7ff ffc2 	bl	80007ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000868:	4b07      	ldr	r3, [pc, #28]	; (8000888 <SysTick_Config+0x48>)
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800086e:	4b06      	ldr	r3, [pc, #24]	; (8000888 <SysTick_Config+0x48>)
 8000870:	2207      	movs	r2, #7
 8000872:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  NVIC_EnableIRQ(SysTick_IRQn);
 8000874:	f04f 30ff 	mov.w	r0, #4294967295
 8000878:	f7ff ff9a 	bl	80007b0 <__NVIC_EnableIRQ>
  return (0UL);                                                     /* Function successful */
 800087c:	2300      	movs	r3, #0
}
 800087e:	4618      	mov	r0, r3
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	e000e010 	.word	0xe000e010

0800088c <SysTick_Handler>:
//#endif

#include "main.h"
uint16_t times = 0;
void SysTick_Handler(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
	if(times >= 1000)
 8000890:	4b0a      	ldr	r3, [pc, #40]	; (80008bc <SysTick_Handler+0x30>)
 8000892:	881b      	ldrh	r3, [r3, #0]
 8000894:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000898:	d307      	bcc.n	80008aa <SysTick_Handler+0x1e>
	{
		GPIO_Toggle(LED6_Port, LED6_Pin);
 800089a:	210f      	movs	r1, #15
 800089c:	4808      	ldr	r0, [pc, #32]	; (80008c0 <SysTick_Handler+0x34>)
 800089e:	f000 fa10 	bl	8000cc2 <GPIO_Toggle>
		times = 0;
 80008a2:	4b06      	ldr	r3, [pc, #24]	; (80008bc <SysTick_Handler+0x30>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	801a      	strh	r2, [r3, #0]
	}
	else
	{
		times++;
	}
}
 80008a8:	e005      	b.n	80008b6 <SysTick_Handler+0x2a>
		times++;
 80008aa:	4b04      	ldr	r3, [pc, #16]	; (80008bc <SysTick_Handler+0x30>)
 80008ac:	881b      	ldrh	r3, [r3, #0]
 80008ae:	3301      	adds	r3, #1
 80008b0:	b29a      	uxth	r2, r3
 80008b2:	4b02      	ldr	r3, [pc, #8]	; (80008bc <SysTick_Handler+0x30>)
 80008b4:	801a      	strh	r2, [r3, #0]
}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	20000024 	.word	0x20000024
 80008c0:	40020c00 	.word	0x40020c00

080008c4 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
	if(EXTI -> PR & (1 << PR0))
 80008c8:	4b13      	ldr	r3, [pc, #76]	; (8000918 <EXTI0_IRQHandler+0x54>)
 80008ca:	695b      	ldr	r3, [r3, #20]
 80008cc:	f003 0301 	and.w	r3, r3, #1
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d01f      	beq.n	8000914 <EXTI0_IRQHandler+0x50>
	{
		EXTI -> PR &= ~(0 << PR0);
 80008d4:	4b10      	ldr	r3, [pc, #64]	; (8000918 <EXTI0_IRQHandler+0x54>)
 80008d6:	4a10      	ldr	r2, [pc, #64]	; (8000918 <EXTI0_IRQHandler+0x54>)
 80008d8:	695b      	ldr	r3, [r3, #20]
 80008da:	6153      	str	r3, [r2, #20]
		if(GPIO_Read(BTN_Port, BTN_Pin))
 80008dc:	2100      	movs	r1, #0
 80008de:	480f      	ldr	r0, [pc, #60]	; (800091c <EXTI0_IRQHandler+0x58>)
 80008e0:	f000 f9a0 	bl	8000c24 <GPIO_Read>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d00a      	beq.n	8000900 <EXTI0_IRQHandler+0x3c>
		{
			GPIO_Write(LED4_Port, LED4_Pin, HIGH);
 80008ea:	2201      	movs	r2, #1
 80008ec:	210c      	movs	r1, #12
 80008ee:	480c      	ldr	r0, [pc, #48]	; (8000920 <EXTI0_IRQHandler+0x5c>)
 80008f0:	f000 f9b3 	bl	8000c5a <GPIO_Write>
			UART_Writes(USART2, "LED 3: BAT\n", 11);
 80008f4:	220b      	movs	r2, #11
 80008f6:	490b      	ldr	r1, [pc, #44]	; (8000924 <EXTI0_IRQHandler+0x60>)
 80008f8:	480b      	ldr	r0, [pc, #44]	; (8000928 <EXTI0_IRQHandler+0x64>)
 80008fa:	f000 fa75 	bl	8000de8 <UART_Writes>
		{
			GPIO_Write(LED4_Port, LED4_Pin, LOW);
			UART_Writes(USART2, "LED 3: TAT\n", 11);
		}
	}
}
 80008fe:	e009      	b.n	8000914 <EXTI0_IRQHandler+0x50>
			GPIO_Write(LED4_Port, LED4_Pin, LOW);
 8000900:	2200      	movs	r2, #0
 8000902:	210c      	movs	r1, #12
 8000904:	4806      	ldr	r0, [pc, #24]	; (8000920 <EXTI0_IRQHandler+0x5c>)
 8000906:	f000 f9a8 	bl	8000c5a <GPIO_Write>
			UART_Writes(USART2, "LED 3: TAT\n", 11);
 800090a:	220b      	movs	r2, #11
 800090c:	4907      	ldr	r1, [pc, #28]	; (800092c <EXTI0_IRQHandler+0x68>)
 800090e:	4806      	ldr	r0, [pc, #24]	; (8000928 <EXTI0_IRQHandler+0x64>)
 8000910:	f000 fa6a 	bl	8000de8 <UART_Writes>
}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40013c00 	.word	0x40013c00
 800091c:	40020000 	.word	0x40020000
 8000920:	40020c00 	.word	0x40020c00
 8000924:	0800101c 	.word	0x0800101c
 8000928:	40004400 	.word	0x40004400
 800092c:	08001028 	.word	0x08001028

08000930 <TIM7_IRQHandler>:

void TIM7_IRQHandler(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
	TIM7 -> SR &= (0 << UIF);
 8000934:	4b07      	ldr	r3, [pc, #28]	; (8000954 <TIM7_IRQHandler+0x24>)
 8000936:	691b      	ldr	r3, [r3, #16]
 8000938:	4b06      	ldr	r3, [pc, #24]	; (8000954 <TIM7_IRQHandler+0x24>)
 800093a:	2200      	movs	r2, #0
 800093c:	611a      	str	r2, [r3, #16]
	TIM7 -> CNT = 64535;
 800093e:	4b05      	ldr	r3, [pc, #20]	; (8000954 <TIM7_IRQHandler+0x24>)
 8000940:	f64f 4217 	movw	r2, #64535	; 0xfc17
 8000944:	625a      	str	r2, [r3, #36]	; 0x24
	GPIO_Toggle(LED5_Port, LED5_Pin);
 8000946:	210e      	movs	r1, #14
 8000948:	4803      	ldr	r0, [pc, #12]	; (8000958 <TIM7_IRQHandler+0x28>)
 800094a:	f000 f9ba 	bl	8000cc2 <GPIO_Toggle>
}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40001400 	.word	0x40001400
 8000958:	40020c00 	.word	0x40020c00

0800095c <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
	if(USART2 -> SR & (1 << RXNE))
 8000960:	4b04      	ldr	r3, [pc, #16]	; (8000974 <USART2_IRQHandler+0x18>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f003 0320 	and.w	r3, r3, #32
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <USART2_IRQHandler+0x14>
	{
		USART2_RX_Interrupt();
 800096c:	f000 fae0 	bl	8000f30 <USART2_RX_Interrupt>
	}
}
 8000970:	bf00      	nop
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40004400 	.word	0x40004400

08000978 <Hardware_Config>:
		GPIO_Write(LED6_Port, LED6_Pin, LOW);
	}
}

void Hardware_Config(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
	SysClock_Config();
 800097c:	f7ff fe42 	bl	8000604 <SysClock_Config>
	SysTick_Config(100000);
 8000980:	480a      	ldr	r0, [pc, #40]	; (80009ac <Hardware_Config+0x34>)
 8000982:	f7ff ff5d 	bl	8000840 <SysTick_Config>
	GPIO_Config();
 8000986:	f7ff fcb3 	bl	80002f0 <GPIO_Config>
	Interrupt_Config();
 800098a:	f000 f91d 	bl	8000bc8 <Interrupt_Config>
	TIM6_Config();
 800098e:	f000 fa57 	bl	8000e40 <TIM6_Config>
	TIM7_Config();
 8000992:	f000 fa77 	bl	8000e84 <TIM7_Config>
	UART2_Config();
 8000996:	f000 f9b3 	bl	8000d00 <UART2_Config>
	SPI1_Config();
 800099a:	f7ff fcdb 	bl	8000354 <SPI1_Config>
	SPI3_Config();
 800099e:	f7ff fd2b 	bl	80003f8 <SPI3_Config>
	ADC1_Config();
 80009a2:	f000 f8c5 	bl	8000b30 <_etext>
}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	000186a0 	.word	0x000186a0

080009b0 <main>:
uint16_t adc_value[2];
uint8_t data[5] = {1, 2, 3, 4, 5};
uint8_t datarv[5];

int main(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af02      	add	r7, sp, #8
	Hardware_Config();
 80009b6:	f7ff ffdf 	bl	8000978 <Hardware_Config>
	TIM6_Delay_ms(200);
 80009ba:	20c8      	movs	r0, #200	; 0xc8
 80009bc:	f000 faa6 	bl	8000f0c <TIM6_Delay_ms>
	for(;;)
	{
		SPI_CS_Enable();
 80009c0:	f7ff fd84 	bl	80004cc <SPI_CS_Enable>
		SPI_TransmitReceives(SPI1, SPI3, data, datarv, 4);
 80009c4:	2304      	movs	r3, #4
 80009c6:	9300      	str	r3, [sp, #0]
 80009c8:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <main+0x70>)
 80009ca:	4a16      	ldr	r2, [pc, #88]	; (8000a24 <main+0x74>)
 80009cc:	4916      	ldr	r1, [pc, #88]	; (8000a28 <main+0x78>)
 80009ce:	4817      	ldr	r0, [pc, #92]	; (8000a2c <main+0x7c>)
 80009d0:	f7ff fd94 	bl	80004fc <SPI_TransmitReceives>
		SPI_CS_Disable();
 80009d4:	f7ff fd86 	bl	80004e4 <SPI_CS_Disable>
		data[0]++;
 80009d8:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <main+0x74>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	3301      	adds	r3, #1
 80009de:	b2da      	uxtb	r2, r3
 80009e0:	4b10      	ldr	r3, [pc, #64]	; (8000a24 <main+0x74>)
 80009e2:	701a      	strb	r2, [r3, #0]
		data[2]++;
 80009e4:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <main+0x74>)
 80009e6:	789b      	ldrb	r3, [r3, #2]
 80009e8:	3301      	adds	r3, #1
 80009ea:	b2da      	uxtb	r2, r3
 80009ec:	4b0d      	ldr	r3, [pc, #52]	; (8000a24 <main+0x74>)
 80009ee:	709a      	strb	r2, [r3, #2]
		GPIO_Toggle(LED3_Port, LED3_Pin);
 80009f0:	210d      	movs	r1, #13
 80009f2:	480f      	ldr	r0, [pc, #60]	; (8000a30 <main+0x80>)
 80009f4:	f000 f965 	bl	8000cc2 <GPIO_Toggle>
		adc_value[0] = ADC1_GetValue(8);
 80009f8:	2008      	movs	r0, #8
 80009fa:	f7ff fc15 	bl	8000228 <ADC1_GetValue>
 80009fe:	4603      	mov	r3, r0
 8000a00:	461a      	mov	r2, r3
 8000a02:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <main+0x84>)
 8000a04:	801a      	strh	r2, [r3, #0]
		adc_value[1] = ADC1_GetValue(9);
 8000a06:	2009      	movs	r0, #9
 8000a08:	f7ff fc0e 	bl	8000228 <ADC1_GetValue>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	461a      	mov	r2, r3
 8000a10:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <main+0x84>)
 8000a12:	805a      	strh	r2, [r3, #2]
		TIM6_Delay_ms(500);
 8000a14:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a18:	f000 fa78 	bl	8000f0c <TIM6_Delay_ms>
		SPI_CS_Enable();
 8000a1c:	e7d0      	b.n	80009c0 <main+0x10>
 8000a1e:	bf00      	nop
 8000a20:	20000028 	.word	0x20000028
 8000a24:	20000000 	.word	0x20000000
 8000a28:	40003c00 	.word	0x40003c00
 8000a2c:	40013000 	.word	0x40013000
 8000a30:	40020c00 	.word	0x40020c00
 8000a34:	20000030 	.word	0x20000030

08000a38 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a38:	480d      	ldr	r0, [pc, #52]	; (8000a70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a3a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a3c:	480d      	ldr	r0, [pc, #52]	; (8000a74 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a3e:	490e      	ldr	r1, [pc, #56]	; (8000a78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a40:	4a0e      	ldr	r2, [pc, #56]	; (8000a7c <LoopForever+0xe>)
  movs r3, #0
 8000a42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a44:	e002      	b.n	8000a4c <LoopCopyDataInit>

08000a46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a4a:	3304      	adds	r3, #4

08000a4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a50:	d3f9      	bcc.n	8000a46 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a52:	4a0b      	ldr	r2, [pc, #44]	; (8000a80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a54:	4c0b      	ldr	r4, [pc, #44]	; (8000a84 <LoopForever+0x16>)
  movs r3, #0
 8000a56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a58:	e001      	b.n	8000a5e <LoopFillZerobss>

08000a5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a5c:	3204      	adds	r2, #4

08000a5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a60:	d3fb      	bcc.n	8000a5a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a62:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000a66:	f000 f811 	bl	8000a8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a6a:	f7ff ffa1 	bl	80009b0 <main>

08000a6e <LoopForever>:

LoopForever:
    b LoopForever
 8000a6e:	e7fe      	b.n	8000a6e <LoopForever>
  ldr   r0, =_estack
 8000a70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a78:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8000a7c:	0800103c 	.word	0x0800103c
  ldr r2, =_sbss
 8000a80:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8000a84:	20000098 	.word	0x20000098

08000a88 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a88:	e7fe      	b.n	8000a88 <ADC_IRQHandler>
	...

08000a8c <__libc_init_array>:
 8000a8c:	b570      	push	{r4, r5, r6, lr}
 8000a8e:	4e0d      	ldr	r6, [pc, #52]	; (8000ac4 <__libc_init_array+0x38>)
 8000a90:	4c0d      	ldr	r4, [pc, #52]	; (8000ac8 <__libc_init_array+0x3c>)
 8000a92:	1ba4      	subs	r4, r4, r6
 8000a94:	10a4      	asrs	r4, r4, #2
 8000a96:	2500      	movs	r5, #0
 8000a98:	42a5      	cmp	r5, r4
 8000a9a:	d109      	bne.n	8000ab0 <__libc_init_array+0x24>
 8000a9c:	4e0b      	ldr	r6, [pc, #44]	; (8000acc <__libc_init_array+0x40>)
 8000a9e:	4c0c      	ldr	r4, [pc, #48]	; (8000ad0 <__libc_init_array+0x44>)
 8000aa0:	f000 f83a 	bl	8000b18 <_init>
 8000aa4:	1ba4      	subs	r4, r4, r6
 8000aa6:	10a4      	asrs	r4, r4, #2
 8000aa8:	2500      	movs	r5, #0
 8000aaa:	42a5      	cmp	r5, r4
 8000aac:	d105      	bne.n	8000aba <__libc_init_array+0x2e>
 8000aae:	bd70      	pop	{r4, r5, r6, pc}
 8000ab0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ab4:	4798      	blx	r3
 8000ab6:	3501      	adds	r5, #1
 8000ab8:	e7ee      	b.n	8000a98 <__libc_init_array+0xc>
 8000aba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000abe:	4798      	blx	r3
 8000ac0:	3501      	adds	r5, #1
 8000ac2:	e7f2      	b.n	8000aaa <__libc_init_array+0x1e>
 8000ac4:	08001034 	.word	0x08001034
 8000ac8:	08001034 	.word	0x08001034
 8000acc:	08001034 	.word	0x08001034
 8000ad0:	08001038 	.word	0x08001038

08000ad4 <memset>:
 8000ad4:	4402      	add	r2, r0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d100      	bne.n	8000ade <memset+0xa>
 8000adc:	4770      	bx	lr
 8000ade:	f803 1b01 	strb.w	r1, [r3], #1
 8000ae2:	e7f9      	b.n	8000ad8 <memset+0x4>

08000ae4 <strstr>:
 8000ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ae6:	7803      	ldrb	r3, [r0, #0]
 8000ae8:	b17b      	cbz	r3, 8000b0a <strstr+0x26>
 8000aea:	4604      	mov	r4, r0
 8000aec:	7823      	ldrb	r3, [r4, #0]
 8000aee:	4620      	mov	r0, r4
 8000af0:	1c66      	adds	r6, r4, #1
 8000af2:	b17b      	cbz	r3, 8000b14 <strstr+0x30>
 8000af4:	1e4a      	subs	r2, r1, #1
 8000af6:	1e63      	subs	r3, r4, #1
 8000af8:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8000afc:	b14d      	cbz	r5, 8000b12 <strstr+0x2e>
 8000afe:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8000b02:	42af      	cmp	r7, r5
 8000b04:	4634      	mov	r4, r6
 8000b06:	d0f7      	beq.n	8000af8 <strstr+0x14>
 8000b08:	e7f0      	b.n	8000aec <strstr+0x8>
 8000b0a:	780b      	ldrb	r3, [r1, #0]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	bf18      	it	ne
 8000b10:	2000      	movne	r0, #0
 8000b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b14:	4618      	mov	r0, r3
 8000b16:	e7fc      	b.n	8000b12 <strstr+0x2e>

08000b18 <_init>:
 8000b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b1a:	bf00      	nop
 8000b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b1e:	bc08      	pop	{r3}
 8000b20:	469e      	mov	lr, r3
 8000b22:	4770      	bx	lr

08000b24 <_fini>:
 8000b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b26:	bf00      	nop
 8000b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b2a:	bc08      	pop	{r3}
 8000b2c:	469e      	mov	lr, r3
 8000b2e:	4770      	bx	lr

Disassembly of section .sec.:

08000b30 <ADC1_Config>:
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
	RCC -> APB2ENR |= (1 << ADC1_EN);
 8000b34:	4b20      	ldr	r3, [pc, #128]	; (8000bb8 <_etext+0x88>)
 8000b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b38:	4a1f      	ldr	r2, [pc, #124]	; (8000bb8 <_etext+0x88>)
 8000b3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b3e:	6453      	str	r3, [r2, #68]	; 0x44
	RCC -> AHB1ENR |= (1 << GPIOB_EN);
 8000b40:	4b1d      	ldr	r3, [pc, #116]	; (8000bb8 <_etext+0x88>)
 8000b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b44:	4a1c      	ldr	r2, [pc, #112]	; (8000bb8 <_etext+0x88>)
 8000b46:	f043 0302 	orr.w	r3, r3, #2
 8000b4a:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOB -> MODER |= (ANL << MODER1) |(ANL << MODER0);
 8000b4c:	4b1b      	ldr	r3, [pc, #108]	; (8000bbc <_etext+0x8c>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a1a      	ldr	r2, [pc, #104]	; (8000bbc <_etext+0x8c>)
 8000b52:	f043 030f 	orr.w	r3, r3, #15
 8000b56:	6013      	str	r3, [r2, #0]
	ADC -> CCR |= (PCKL2_DIV_2 << ADCPRE);
 8000b58:	4b19      	ldr	r3, [pc, #100]	; (8000bc0 <_etext+0x90>)
 8000b5a:	4a19      	ldr	r2, [pc, #100]	; (8000bc0 <_etext+0x90>)
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	6053      	str	r3, [r2, #4]
	ADC1 -> CR1 |= (1 << SCAN) | (ADC_12_BIT << RES); // Scan mode + 12 bit ADC restion
 8000b60:	4b18      	ldr	r3, [pc, #96]	; (8000bc4 <_etext+0x94>)
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	4a17      	ldr	r2, [pc, #92]	; (8000bc4 <_etext+0x94>)
 8000b66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b6a:	6053      	str	r3, [r2, #4]
	ADC1 -> CR2 = (1 << CONT);
 8000b6c:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <_etext+0x94>)
 8000b6e:	2202      	movs	r2, #2
 8000b70:	609a      	str	r2, [r3, #8]
	ADC1 -> CR2 |= (1 << EOCS); //
 8000b72:	4b14      	ldr	r3, [pc, #80]	; (8000bc4 <_etext+0x94>)
 8000b74:	689b      	ldr	r3, [r3, #8]
 8000b76:	4a13      	ldr	r2, [pc, #76]	; (8000bc4 <_etext+0x94>)
 8000b78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b7c:	6093      	str	r3, [r2, #8]
	ADC1 -> CR2 &= ~(1 << ALIGN);
 8000b7e:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <_etext+0x94>)
 8000b80:	689b      	ldr	r3, [r3, #8]
 8000b82:	4a10      	ldr	r2, [pc, #64]	; (8000bc4 <_etext+0x94>)
 8000b84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000b88:	6093      	str	r3, [r2, #8]
	ADC1 -> SMPR2 |= (SAMPLE_15CYC << SMP8) | (SAMPLE_15CYC << SMP9);
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <_etext+0x94>)
 8000b8c:	691b      	ldr	r3, [r3, #16]
 8000b8e:	4a0d      	ldr	r2, [pc, #52]	; (8000bc4 <_etext+0x94>)
 8000b90:	f043 6310 	orr.w	r3, r3, #150994944	; 0x9000000
 8000b94:	6113      	str	r3, [r2, #16]
	ADC1 -> SQR1 |= (1 << L);
 8000b96:	4b0b      	ldr	r3, [pc, #44]	; (8000bc4 <_etext+0x94>)
 8000b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b9a:	4a0a      	ldr	r2, [pc, #40]	; (8000bc4 <_etext+0x94>)
 8000b9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000ba0:	62d3      	str	r3, [r2, #44]	; 0x2c
	ADC1 -> CR2 |= (1 << ADON);
 8000ba2:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <_etext+0x94>)
 8000ba4:	689b      	ldr	r3, [r3, #8]
 8000ba6:	4a07      	ldr	r2, [pc, #28]	; (8000bc4 <_etext+0x94>)
 8000ba8:	f043 0301 	orr.w	r3, r3, #1
 8000bac:	6093      	str	r3, [r2, #8]
	TIM6_Delay_us(10);
 8000bae:	200a      	movs	r0, #10
 8000bb0:	f000 f992 	bl	8000ed8 <TIM6_Delay_us>
}
 8000bb4:	bf00      	nop
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	40020400 	.word	0x40020400
 8000bc0:	40012300 	.word	0x40012300
 8000bc4:	40012000 	.word	0x40012000

08000bc8 <Interrupt_Config>:
#define LOW		0

#ifdef STM32F407DEF_H_

void Interrupt_Config(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
	RCC -> APB2ENR |= (1 << SYSCFG_EN); 	// Enable SYSCNFG Clock
 8000bcc:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <Interrupt_Config+0x50>)
 8000bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd0:	4a11      	ldr	r2, [pc, #68]	; (8000c18 <Interrupt_Config+0x50>)
 8000bd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bd6:	6453      	str	r3, [r2, #68]	; 0x44
	SYSCFG -> EXTICR[0] &= 0x0;				// PORT A: Interrupt
 8000bd8:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <Interrupt_Config+0x54>)
 8000bda:	689b      	ldr	r3, [r3, #8]
 8000bdc:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <Interrupt_Config+0x54>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	609a      	str	r2, [r3, #8]
	EXTI -> IMR	 |= (1 << MR0);
 8000be2:	4b0f      	ldr	r3, [pc, #60]	; (8000c20 <Interrupt_Config+0x58>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a0e      	ldr	r2, [pc, #56]	; (8000c20 <Interrupt_Config+0x58>)
 8000be8:	f043 0301 	orr.w	r3, r3, #1
 8000bec:	6013      	str	r3, [r2, #0]
	EXTI -> RTSR |= (1 << TRIG0);
 8000bee:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <Interrupt_Config+0x58>)
 8000bf0:	689b      	ldr	r3, [r3, #8]
 8000bf2:	4a0b      	ldr	r2, [pc, #44]	; (8000c20 <Interrupt_Config+0x58>)
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	6093      	str	r3, [r2, #8]
	EXTI -> FTSR |= (1 << TRIG0);
 8000bfa:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <Interrupt_Config+0x58>)
 8000bfc:	68db      	ldr	r3, [r3, #12]
 8000bfe:	4a08      	ldr	r2, [pc, #32]	; (8000c20 <Interrupt_Config+0x58>)
 8000c00:	f043 0301 	orr.w	r3, r3, #1
 8000c04:	60d3      	str	r3, [r2, #12]
	NVIC_SetPriority(EXTI0_IRQn, 1);
 8000c06:	2101      	movs	r1, #1
 8000c08:	2006      	movs	r0, #6
 8000c0a:	f7ff fb47 	bl	800029c <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI0_IRQn);
 8000c0e:	2006      	movs	r0, #6
 8000c10:	f7ff fb26 	bl	8000260 <__NVIC_EnableIRQ>
}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40013800 	.word	0x40013800
 8000c20:	40013c00 	.word	0x40013c00

08000c24 <GPIO_Read>:

uint8_t GPIO_Read(GPIO_TypeDef* GPIO_Port, uint16_t GPIO_Pin)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	460b      	mov	r3, r1
 8000c2e:	807b      	strh	r3, [r7, #2]
	uint8_t GPIO_Pin_State;
	if(GPIO_Port -> IDR & (1 << GPIO_Pin))
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	691b      	ldr	r3, [r3, #16]
 8000c34:	887a      	ldrh	r2, [r7, #2]
 8000c36:	2101      	movs	r1, #1
 8000c38:	fa01 f202 	lsl.w	r2, r1, r2
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d002      	beq.n	8000c48 <GPIO_Read+0x24>
	{
		GPIO_Pin_State = HIGH;
 8000c42:	2301      	movs	r3, #1
 8000c44:	73fb      	strb	r3, [r7, #15]
 8000c46:	e001      	b.n	8000c4c <GPIO_Read+0x28>
	}
	else
	{
		GPIO_Pin_State = LOW;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	73fb      	strb	r3, [r7, #15]
	}
	return GPIO_Pin_State;
 8000c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3714      	adds	r7, #20
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr

08000c5a <GPIO_Write>:

void GPIO_Write(GPIO_TypeDef* GPIO_Port, uint16_t GPIO_Pin, uint8_t GPIO_Pin_State)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	b083      	sub	sp, #12
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
 8000c62:	460b      	mov	r3, r1
 8000c64:	807b      	strh	r3, [r7, #2]
 8000c66:	4613      	mov	r3, r2
 8000c68:	707b      	strb	r3, [r7, #1]
	switch(GPIO_Pin_State)
 8000c6a:	787b      	ldrb	r3, [r7, #1]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d002      	beq.n	8000c76 <GPIO_Write+0x1c>
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d00b      	beq.n	8000c8c <GPIO_Write+0x32>
 8000c74:	e014      	b.n	8000ca0 <GPIO_Write+0x46>
	{
	case LOW:
		GPIO_Port -> BSRR |= ((1 << GPIO_Pin) << 16);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	699b      	ldr	r3, [r3, #24]
 8000c7a:	887a      	ldrh	r2, [r7, #2]
 8000c7c:	2101      	movs	r1, #1
 8000c7e:	fa01 f202 	lsl.w	r2, r1, r2
 8000c82:	0412      	lsls	r2, r2, #16
 8000c84:	431a      	orrs	r2, r3
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	619a      	str	r2, [r3, #24]
		break;
 8000c8a:	e014      	b.n	8000cb6 <GPIO_Write+0x5c>
	case HIGH:
		GPIO_Port -> BSRR |= (1 << GPIO_Pin);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	699b      	ldr	r3, [r3, #24]
 8000c90:	887a      	ldrh	r2, [r7, #2]
 8000c92:	2101      	movs	r1, #1
 8000c94:	fa01 f202 	lsl.w	r2, r1, r2
 8000c98:	431a      	orrs	r2, r3
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	619a      	str	r2, [r3, #24]
		break;
 8000c9e:	e00a      	b.n	8000cb6 <GPIO_Write+0x5c>
	default:
		GPIO_Port -> BSRR |= ((1 << GPIO_Pin) << 16);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	887a      	ldrh	r2, [r7, #2]
 8000ca6:	2101      	movs	r1, #1
 8000ca8:	fa01 f202 	lsl.w	r2, r1, r2
 8000cac:	0412      	lsls	r2, r2, #16
 8000cae:	431a      	orrs	r2, r3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	619a      	str	r2, [r3, #24]
		break;
 8000cb4:	bf00      	nop
	}
}
 8000cb6:	bf00      	nop
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr

08000cc2 <GPIO_Toggle>:
void GPIO_Toggle(GPIO_TypeDef* GPIO_Port, uint16_t GPIO_Pin)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b082      	sub	sp, #8
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
 8000cca:	460b      	mov	r3, r1
 8000ccc:	807b      	strh	r3, [r7, #2]
	if(GPIO_Read(GPIO_Port, GPIO_Pin))
 8000cce:	887b      	ldrh	r3, [r7, #2]
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f7ff ffa6 	bl	8000c24 <GPIO_Read>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d006      	beq.n	8000cec <GPIO_Toggle+0x2a>
	{
		GPIO_Write(GPIO_Port, GPIO_Pin, LOW);
 8000cde:	887b      	ldrh	r3, [r7, #2]
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	6878      	ldr	r0, [r7, #4]
 8000ce6:	f7ff ffb8 	bl	8000c5a <GPIO_Write>
	}
	else
	{
		GPIO_Write(GPIO_Port, GPIO_Pin, HIGH);
	}
}
 8000cea:	e005      	b.n	8000cf8 <GPIO_Toggle+0x36>
		GPIO_Write(GPIO_Port, GPIO_Pin, HIGH);
 8000cec:	887b      	ldrh	r3, [r7, #2]
 8000cee:	2201      	movs	r2, #1
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f7ff ffb1 	bl	8000c5a <GPIO_Write>
}
 8000cf8:	bf00      	nop
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <UART2_Config>:
 */

#include "UART.h"

void UART2_Config(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
	RCC -> APB1ENR |= (1 << UART2_EN);
 8000d04:	4b2a      	ldr	r3, [pc, #168]	; (8000db0 <UART2_Config+0xb0>)
 8000d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d08:	4a29      	ldr	r2, [pc, #164]	; (8000db0 <UART2_Config+0xb0>)
 8000d0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d0e:	6413      	str	r3, [r2, #64]	; 0x40
	 * Alternate function mode
	 * High Speed
	 * PA3 (ARFL3) => UART mode (AF7)
	 * PA2 (ARFL2) => UART mode (AF7)
	 */
	RCC -> AHB1ENR |= (1 << GPIOA_EN);
 8000d10:	4b27      	ldr	r3, [pc, #156]	; (8000db0 <UART2_Config+0xb0>)
 8000d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d14:	4a26      	ldr	r2, [pc, #152]	; (8000db0 <UART2_Config+0xb0>)
 8000d16:	f043 0301 	orr.w	r3, r3, #1
 8000d1a:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA -> MODER |= (AFM << MODER2) | (AFM << MODER3);
 8000d1c:	4b25      	ldr	r3, [pc, #148]	; (8000db4 <UART2_Config+0xb4>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a24      	ldr	r2, [pc, #144]	; (8000db4 <UART2_Config+0xb4>)
 8000d22:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000d26:	6013      	str	r3, [r2, #0]
	GPIOA -> OSPEEDR |= (H_SPEED << OSPEEDR2) | (H_SPEED << OSPEEDR3);
 8000d28:	4b22      	ldr	r3, [pc, #136]	; (8000db4 <UART2_Config+0xb4>)
 8000d2a:	689b      	ldr	r3, [r3, #8]
 8000d2c:	4a21      	ldr	r2, [pc, #132]	; (8000db4 <UART2_Config+0xb4>)
 8000d2e:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000d32:	6093      	str	r3, [r2, #8]
	GPIOA -> AFRL |= (AF7 << AFRL2) | (AF7 << AFRL3);
 8000d34:	4b1f      	ldr	r3, [pc, #124]	; (8000db4 <UART2_Config+0xb4>)
 8000d36:	6a1b      	ldr	r3, [r3, #32]
 8000d38:	4a1e      	ldr	r2, [pc, #120]	; (8000db4 <UART2_Config+0xb4>)
 8000d3a:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8000d3e:	6213      	str	r3, [r2, #32]

	/*
	 * USART2 Enable
	 * 1 Start bit, 8 Data bit, 1 Stop bit
	 */
	USART2 -> CR1 |= 0x00;
 8000d40:	4b1d      	ldr	r3, [pc, #116]	; (8000db8 <UART2_Config+0xb8>)
 8000d42:	4a1d      	ldr	r2, [pc, #116]	; (8000db8 <UART2_Config+0xb8>)
 8000d44:	68db      	ldr	r3, [r3, #12]
 8000d46:	60d3      	str	r3, [r2, #12]
	USART2 -> CR1 |= (1 << UE);
 8000d48:	4b1b      	ldr	r3, [pc, #108]	; (8000db8 <UART2_Config+0xb8>)
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	4a1a      	ldr	r2, [pc, #104]	; (8000db8 <UART2_Config+0xb8>)
 8000d4e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d52:	60d3      	str	r3, [r2, #12]
	USART2 -> CR1 |= (DATA_BIT_8 << M);
 8000d54:	4b18      	ldr	r3, [pc, #96]	; (8000db8 <UART2_Config+0xb8>)
 8000d56:	4a18      	ldr	r2, [pc, #96]	; (8000db8 <UART2_Config+0xb8>)
 8000d58:	68db      	ldr	r3, [r3, #12]
 8000d5a:	60d3      	str	r3, [r2, #12]
	USART2 -> CR2 |= (STOP_BIT_1 << UART_STOP);
 8000d5c:	4b16      	ldr	r3, [pc, #88]	; (8000db8 <UART2_Config+0xb8>)
 8000d5e:	4a16      	ldr	r2, [pc, #88]	; (8000db8 <UART2_Config+0xb8>)
 8000d60:	691b      	ldr	r3, [r3, #16]
 8000d62:	6113      	str	r3, [r2, #16]
	 * How to derive USARTDIV from USART_BRR register values when OVER8=1:
	 * USARTDIV = Fck / (8 * 115200) = 27.13 => 27 & 0.13
	 * DIV_Mantissa = 27
	 * 0.13 * 8, the nearest real number is 1 => DIV_Fraction = 1.
	 */
	USART2 -> CR1 |= (1 << OVER8);
 8000d64:	4b14      	ldr	r3, [pc, #80]	; (8000db8 <UART2_Config+0xb8>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	4a13      	ldr	r2, [pc, #76]	; (8000db8 <UART2_Config+0xb8>)
 8000d6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d6e:	60d3      	str	r3, [r2, #12]
	USART2 -> BRR = 0x0000;
 8000d70:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <UART2_Config+0xb8>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	609a      	str	r2, [r3, #8]
	USART2 -> BRR |= (1 << 0) | (27 << 4);
 8000d76:	4b10      	ldr	r3, [pc, #64]	; (8000db8 <UART2_Config+0xb8>)
 8000d78:	689b      	ldr	r3, [r3, #8]
 8000d7a:	4a0f      	ldr	r2, [pc, #60]	; (8000db8 <UART2_Config+0xb8>)
 8000d7c:	f443 73d8 	orr.w	r3, r3, #432	; 0x1b0
 8000d80:	f043 0301 	orr.w	r3, r3, #1
 8000d84:	6093      	str	r3, [r2, #8]
	/*
	 * UART2:
	 * Transmitter and receiver Enable.
	 * Receiver interrupt Enable
	 */
	USART2 -> CR1 |= (1 << RE) | (1 << TE);
 8000d86:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <UART2_Config+0xb8>)
 8000d88:	68db      	ldr	r3, [r3, #12]
 8000d8a:	4a0b      	ldr	r2, [pc, #44]	; (8000db8 <UART2_Config+0xb8>)
 8000d8c:	f043 030c 	orr.w	r3, r3, #12
 8000d90:	60d3      	str	r3, [r2, #12]
	USART2 -> CR1 |= (1 << RXNEIE); // RXNE interrup enable
 8000d92:	4b09      	ldr	r3, [pc, #36]	; (8000db8 <UART2_Config+0xb8>)
 8000d94:	68db      	ldr	r3, [r3, #12]
 8000d96:	4a08      	ldr	r2, [pc, #32]	; (8000db8 <UART2_Config+0xb8>)
 8000d98:	f043 0320 	orr.w	r3, r3, #32
 8000d9c:	60d3      	str	r3, [r2, #12]
	/*
	 * NVIC set enable Interrupt
	 */
	NVIC_SetPriority(USART2_IRQn, 2);
 8000d9e:	2102      	movs	r1, #2
 8000da0:	2026      	movs	r0, #38	; 0x26
 8000da2:	f7ff fc93 	bl	80006cc <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART2_IRQn);
 8000da6:	2026      	movs	r0, #38	; 0x26
 8000da8:	f7ff fc72 	bl	8000690 <__NVIC_EnableIRQ>
}
 8000dac:	bf00      	nop
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40023800 	.word	0x40023800
 8000db4:	40020000 	.word	0x40020000
 8000db8:	40004400 	.word	0x40004400

08000dbc <UART_SendChar>:

Section void UART_SendChar(USART_TypeDef *USARTx, char chr)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	70fb      	strb	r3, [r7, #3]
	USARTx -> DR = chr;
 8000dc8:	78fa      	ldrb	r2, [r7, #3]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	605a      	str	r2, [r3, #4]
	while (!(USARTx -> SR & (1 << TC)));
 8000dce:	bf00      	nop
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d0f9      	beq.n	8000dd0 <UART_SendChar+0x14>
}
 8000ddc:	bf00      	nop
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <UART_Writes>:
void UART_Writes(USART_TypeDef *USARTx, char *string, uint16_t size)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	60f8      	str	r0, [r7, #12]
 8000df0:	60b9      	str	r1, [r7, #8]
 8000df2:	4613      	mov	r3, r2
 8000df4:	80fb      	strh	r3, [r7, #6]
	uint16_t index = 0;
 8000df6:	2300      	movs	r3, #0
 8000df8:	82fb      	strh	r3, [r7, #22]
	while(index < size)
 8000dfa:	e00a      	b.n	8000e12 <UART_Writes+0x2a>
	{
		UART_SendChar(USARTx, string[index]);
 8000dfc:	8afb      	ldrh	r3, [r7, #22]
 8000dfe:	68ba      	ldr	r2, [r7, #8]
 8000e00:	4413      	add	r3, r2
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	4619      	mov	r1, r3
 8000e06:	68f8      	ldr	r0, [r7, #12]
 8000e08:	f7ff ffd8 	bl	8000dbc <UART_SendChar>
		index++;
 8000e0c:	8afb      	ldrh	r3, [r7, #22]
 8000e0e:	3301      	adds	r3, #1
 8000e10:	82fb      	strh	r3, [r7, #22]
	while(index < size)
 8000e12:	8afa      	ldrh	r2, [r7, #22]
 8000e14:	88fb      	ldrh	r3, [r7, #6]
 8000e16:	429a      	cmp	r2, r3
 8000e18:	d3f0      	bcc.n	8000dfc <UART_Writes+0x14>
	}
}
 8000e1a:	bf00      	nop
 8000e1c:	3718      	adds	r7, #24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <UART_ReadChar>:
char UART_ReadChar(USART_TypeDef *USARTx)
{
 8000e22:	b480      	push	{r7}
 8000e24:	b085      	sub	sp, #20
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
	char chr;
	chr = USARTx -> DR;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	73fb      	strb	r3, [r7, #15]
	return (chr);
 8000e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3714      	adds	r7, #20
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop

08000e40 <TIM6_Config>:
#include "timer.h"

#ifdef STM32F407DEF_H_

void TIM6_Config(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
	 * APB1 Timer clocks: 50Mhz
	 * Enable Timer 6
	 * Timer Prescale: 50Mhz/50 ~ 1us
	 * Counter Enable
	 */
	RCC -> APB1ENR |= (1 << TIM6_EN);
 8000e44:	4b0d      	ldr	r3, [pc, #52]	; (8000e7c <TIM6_Config+0x3c>)
 8000e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e48:	4a0c      	ldr	r2, [pc, #48]	; (8000e7c <TIM6_Config+0x3c>)
 8000e4a:	f043 0310 	orr.w	r3, r3, #16
 8000e4e:	6413      	str	r3, [r2, #64]	; 0x40

	TIM6 -> PSC = 50 - 1;
 8000e50:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <TIM6_Config+0x40>)
 8000e52:	2231      	movs	r2, #49	; 0x31
 8000e54:	629a      	str	r2, [r3, #40]	; 0x28

	TIM6 -> CR1 |= (1 << CEN);
 8000e56:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <TIM6_Config+0x40>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a09      	ldr	r2, [pc, #36]	; (8000e80 <TIM6_Config+0x40>)
 8000e5c:	f043 0301 	orr.w	r3, r3, #1
 8000e60:	6013      	str	r3, [r2, #0]
	while(!(TIM6 -> SR & (1 << UIF)));
 8000e62:	bf00      	nop
 8000e64:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <TIM6_Config+0x40>)
 8000e66:	691b      	ldr	r3, [r3, #16]
 8000e68:	f003 0301 	and.w	r3, r3, #1
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d0f9      	beq.n	8000e64 <TIM6_Config+0x24>
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	40023800 	.word	0x40023800
 8000e80:	40001000 	.word	0x40001000

08000e84 <TIM7_Config>:
		TIM6_Delay_us(1000);
	}
}

void TIM7_Config(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
	 * Enable Timer 7
	 * Timer Prescale: 50Mhz/50000 ~ 1ms
	 * Counter = 1000 (64535 - 65535) = 1s : Interrupt
	 * Counter Enable
	 */
	RCC -> APB1ENR |= (1 << TIM7_EN);
 8000e88:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <TIM7_Config+0x4c>)
 8000e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8c:	4a10      	ldr	r2, [pc, #64]	; (8000ed0 <TIM7_Config+0x4c>)
 8000e8e:	f043 0320 	orr.w	r3, r3, #32
 8000e92:	6413      	str	r3, [r2, #64]	; 0x40

	TIM7 -> DIER |= (1 << UIE);
 8000e94:	4b0f      	ldr	r3, [pc, #60]	; (8000ed4 <TIM7_Config+0x50>)
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	4a0e      	ldr	r2, [pc, #56]	; (8000ed4 <TIM7_Config+0x50>)
 8000e9a:	f043 0301 	orr.w	r3, r3, #1
 8000e9e:	60d3      	str	r3, [r2, #12]
	TIM7 -> PSC = 50000 - 1;
 8000ea0:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <TIM7_Config+0x50>)
 8000ea2:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000ea6:	629a      	str	r2, [r3, #40]	; 0x28
	TIM7 -> CNT = 64535;
 8000ea8:	4b0a      	ldr	r3, [pc, #40]	; (8000ed4 <TIM7_Config+0x50>)
 8000eaa:	f64f 4217 	movw	r2, #64535	; 0xfc17
 8000eae:	625a      	str	r2, [r3, #36]	; 0x24

	TIM7 -> CR1 |= (1 << CEN);
 8000eb0:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <TIM7_Config+0x50>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a07      	ldr	r2, [pc, #28]	; (8000ed4 <TIM7_Config+0x50>)
 8000eb6:	f043 0301 	orr.w	r3, r3, #1
 8000eba:	6013      	str	r3, [r2, #0]
	/*
	 * NVIC set enable Interrupt
	 */
	NVIC_SetPriority(TIM7_IRQn, 2);
 8000ebc:	2102      	movs	r1, #2
 8000ebe:	2037      	movs	r0, #55	; 0x37
 8000ec0:	f7ff fc4c 	bl	800075c <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM7_IRQn);
 8000ec4:	2037      	movs	r0, #55	; 0x37
 8000ec6:	f7ff fc2b 	bl	8000720 <__NVIC_EnableIRQ>
}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40023800 	.word	0x40023800
 8000ed4:	40001400 	.word	0x40001400

08000ed8 <TIM6_Delay_us>:
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	80fb      	strh	r3, [r7, #6]
	TIM6_Config();
 8000ee2:	f7ff ffad 	bl	8000e40 <TIM6_Config>
	TIM6 -> CNT = 0;
 8000ee6:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <TIM6_Delay_us+0x30>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	625a      	str	r2, [r3, #36]	; 0x24
	while(TIM6 -> CNT < time);
 8000eec:	bf00      	nop
 8000eee:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <TIM6_Delay_us+0x30>)
 8000ef0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ef2:	88fb      	ldrh	r3, [r7, #6]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d3fa      	bcc.n	8000eee <TIM6_Delay_us+0x16>
	TIM6 -> CR1 = 0x00;
 8000ef8:	4b03      	ldr	r3, [pc, #12]	; (8000f08 <TIM6_Delay_us+0x30>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40001000 	.word	0x40001000

08000f0c <TIM6_Delay_ms>:
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
	while(time --)
 8000f14:	e003      	b.n	8000f1e <TIM6_Delay_ms+0x12>
		TIM6_Delay_us(1000);
 8000f16:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f1a:	f7ff ffdd 	bl	8000ed8 <TIM6_Delay_us>
	while(time --)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	1e5a      	subs	r2, r3, #1
 8000f22:	607a      	str	r2, [r7, #4]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d1f6      	bne.n	8000f16 <TIM6_Delay_ms+0xa>
}
 8000f28:	bf00      	nop
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <USART2_RX_Interrupt>:
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
	char chr = UART_ReadChar(USART2);
 8000f36:	4829      	ldr	r0, [pc, #164]	; (8000fdc <USART2_RX_Interrupt+0xac>)
 8000f38:	f7ff ff73 	bl	8000e22 <UART_ReadChar>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	71fb      	strb	r3, [r7, #7]
	if(chr == '{')
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	2b7b      	cmp	r3, #123	; 0x7b
 8000f44:	d114      	bne.n	8000f70 <USART2_RX_Interrupt+0x40>
		memset(rx_array, 0, 100);
 8000f46:	2264      	movs	r2, #100	; 0x64
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4825      	ldr	r0, [pc, #148]	; (8000fe0 <USART2_RX_Interrupt+0xb0>)
 8000f4c:	f7ff fdc2 	bl	8000ad4 <memset>
		rx_index = 0;
 8000f50:	4b24      	ldr	r3, [pc, #144]	; (8000fe4 <USART2_RX_Interrupt+0xb4>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	701a      	strb	r2, [r3, #0]
		rx_array[rx_index] = chr;
 8000f56:	4b23      	ldr	r3, [pc, #140]	; (8000fe4 <USART2_RX_Interrupt+0xb4>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4a20      	ldr	r2, [pc, #128]	; (8000fe0 <USART2_RX_Interrupt+0xb0>)
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	5453      	strb	r3, [r2, r1]
		rx_index++;
 8000f62:	4b20      	ldr	r3, [pc, #128]	; (8000fe4 <USART2_RX_Interrupt+0xb4>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	3301      	adds	r3, #1
 8000f68:	b2da      	uxtb	r2, r3
 8000f6a:	4b1e      	ldr	r3, [pc, #120]	; (8000fe4 <USART2_RX_Interrupt+0xb4>)
 8000f6c:	701a      	strb	r2, [r3, #0]
 8000f6e:	e018      	b.n	8000fa2 <USART2_RX_Interrupt+0x72>
	else if(chr == '}')
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	2b7d      	cmp	r3, #125	; 0x7d
 8000f74:	d109      	bne.n	8000f8a <USART2_RX_Interrupt+0x5a>
		rx_array[rx_index] = chr;
 8000f76:	4b1b      	ldr	r3, [pc, #108]	; (8000fe4 <USART2_RX_Interrupt+0xb4>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4a18      	ldr	r2, [pc, #96]	; (8000fe0 <USART2_RX_Interrupt+0xb0>)
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	5453      	strb	r3, [r2, r1]
		rx_index = 0;
 8000f82:	4b18      	ldr	r3, [pc, #96]	; (8000fe4 <USART2_RX_Interrupt+0xb4>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	701a      	strb	r2, [r3, #0]
 8000f88:	e00b      	b.n	8000fa2 <USART2_RX_Interrupt+0x72>
		rx_array[rx_index] = chr;
 8000f8a:	4b16      	ldr	r3, [pc, #88]	; (8000fe4 <USART2_RX_Interrupt+0xb4>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4a13      	ldr	r2, [pc, #76]	; (8000fe0 <USART2_RX_Interrupt+0xb0>)
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	5453      	strb	r3, [r2, r1]
		rx_index++;
 8000f96:	4b13      	ldr	r3, [pc, #76]	; (8000fe4 <USART2_RX_Interrupt+0xb4>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	b2da      	uxtb	r2, r3
 8000f9e:	4b11      	ldr	r3, [pc, #68]	; (8000fe4 <USART2_RX_Interrupt+0xb4>)
 8000fa0:	701a      	strb	r2, [r3, #0]
	if(FindString(rx_array, "BAT") != 0)
 8000fa2:	4911      	ldr	r1, [pc, #68]	; (8000fe8 <USART2_RX_Interrupt+0xb8>)
 8000fa4:	480e      	ldr	r0, [pc, #56]	; (8000fe0 <USART2_RX_Interrupt+0xb0>)
 8000fa6:	f7ff fd9d 	bl	8000ae4 <strstr>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d005      	beq.n	8000fbc <USART2_RX_Interrupt+0x8c>
		GPIO_Write(LED6_Port, LED6_Pin, HIGH);
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	210f      	movs	r1, #15
 8000fb4:	480d      	ldr	r0, [pc, #52]	; (8000fec <USART2_RX_Interrupt+0xbc>)
 8000fb6:	f7ff fe50 	bl	8000c5a <GPIO_Write>
}
 8000fba:	e00b      	b.n	8000fd4 <USART2_RX_Interrupt+0xa4>
	else if(FindString(rx_array, "TAT") != 0)
 8000fbc:	490c      	ldr	r1, [pc, #48]	; (8000ff0 <USART2_RX_Interrupt+0xc0>)
 8000fbe:	4808      	ldr	r0, [pc, #32]	; (8000fe0 <USART2_RX_Interrupt+0xb0>)
 8000fc0:	f7ff fd90 	bl	8000ae4 <strstr>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d004      	beq.n	8000fd4 <USART2_RX_Interrupt+0xa4>
		GPIO_Write(LED6_Port, LED6_Pin, LOW);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	210f      	movs	r1, #15
 8000fce:	4807      	ldr	r0, [pc, #28]	; (8000fec <USART2_RX_Interrupt+0xbc>)
 8000fd0:	f7ff fe43 	bl	8000c5a <GPIO_Write>
}
 8000fd4:	bf00      	nop
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	40004400 	.word	0x40004400
 8000fe0:	20000034 	.word	0x20000034
 8000fe4:	20000026 	.word	0x20000026
 8000fe8:	08001014 	.word	0x08001014
 8000fec:	40020c00 	.word	0x40020c00
 8000ff0:	08001018 	.word	0x08001018

08000ff4 <Delay_Cycle>:
	 * APB1 Prescale	: DIV4	: APB1 Prescale clock: AHB : 4 = 25Mhz
	 * APB2 Prescale	: DIV2	: APB2 Prescale clock: AHB : 2 = 50Mhz
 */

void Delay_Cycle (uint32_t time)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
	while (time --);
 8000ffc:	bf00      	nop
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	1e5a      	subs	r2, r3, #1
 8001002:	607a      	str	r2, [r7, #4]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d1fa      	bne.n	8000ffe <Delay_Cycle+0xa>
}
 8001008:	bf00      	nop
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
